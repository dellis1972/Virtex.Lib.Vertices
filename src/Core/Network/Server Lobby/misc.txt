
        ///// <summary>
        ///// Method for Client Receiving Messages
        ///// </summary>
        ///// <param name="peer">Peer.</param>
        //public void ClientMsgCallback(object peer)
        //{
        //    NetIncomingMessage im;
        //    while ((im = vxEngine.GameClient.ReadMessage()) != null)
        //    {
        //        // handle incoming message
        //        switch (im.MessageType)
        //        {
        //            case NetIncomingMessageType.DebugMessage:
        //            case NetIncomingMessageType.ErrorMessage:
        //            case NetIncomingMessageType.WarningMessage:
        //            case NetIncomingMessageType.VerboseDebugMessage:
        //                string text = im.ReadString();
        //                vxConsole.WriteNetworkLine(im.MessageType + " : " + text);
        //                break;


        //            /**************************************************************/
        //            //StatusChanged
        //            /**************************************************************/
        //            case NetIncomingMessageType.StatusChanged:
        //                NetConnectionStatus status = (NetConnectionStatus)im.ReadByte();

        //                string reason = im.ReadString();
        //                vxConsole.WriteNetworkLine(NetUtility.ToHexString(im.SenderConnection.RemoteUniqueIdentifier) + " " + status + ": " + reason);

        //                if (status == NetConnectionStatus.Disconnected)
        //                {
        //                    //If the Player is a Client, then Notify Them.
        //                    if (reason == SVRMSG_SERVER_SHUTDOWN_REASON && vxEngine.NetworkedGameRoll == vxEnumNetworkPlayerRole.Client)
        //                    {
        //                        vxMessageBox msgBox = new vxMessageBox("The Connection to the Server Was Dropped", "Are You Still There?");
        //                        vxEngine.AddScreen(msgBox, PlayerIndex.One);
        //                    }
        //                    ExitScreen();
        //                }

        //                break;

        //            case NetIncomingMessageType.ConnectionLatencyUpdated:

        //                Console.WriteLine("CLIENT >>"+im.ReadFloat());

        //                break;

        //            /**************************************************************/
        //            //Data
        //            /**************************************************************/
        //            case NetIncomingMessageType.Data:
        //                // incoming chat message from a client
        //                string chat = im.ReadString();

        //                //Split the Text By Carriage Return
        //                string[] result = chat.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries);

        //                switch (result[0])
        //                {
        //                    case SVRMSG_UPDATE_PLAYER_LIST:

        //                        //This Resets The Entire List

        //                        vxEngine.NetworkPlayers.Clear();
        //                        List_Items.Clear();

        //                        for (int i = 1; i<result.Length; i++)
        //                        {
        //                            string plyr = result[i];
        //                            /*
        //                            Console.WriteLine("----------------------------");
        //                            Console.WriteLine("Name: " + vxUtil.ReadXML(plyr, "Name"));
        //                            Console.WriteLine("Level: " + vxUtil.ReadXML(plyr, "Level"));
        //                            Console.WriteLine("Token: " + vxUtil.ReadXML(plyr, "Token"));
        //                            */

        //                            NetworkPlayerInfo newPlayer = new NetworkPlayerInfo(
        //                                vxUtil.ReadXML(plyr, "Name"), 
        //                                Convert.ToInt32(vxUtil.ReadXML(plyr, "Level")),
        //                                vxUtil.ReadXML(plyr, "Token"),
        //                                bool.Parse(vxUtil.ReadXML(plyr, "Ready")));

        //                            vxEngine.NetworkPlayers.Add(newPlayer);

        //                            //Now Add a New Connection
        //                            AddConnectedClient(newPlayer);
        //                        }

        //                        ScrollPanel.Clear();

        //                        foreach (vxServerLobbyPlayerItem it in List_Items)
        //                            ScrollPanel.AddItem(it);


        //                        break;
        //                    case SVRMSG_UPDATE_PLAYER_STATUS:
                                
        //                        for (int i = 1; i < result.Length; i++)
        //                        {
        //                            string plyr = result[i];

        //                            //Parse out the info into new Lobby Player
        //                            NetworkPlayerInfo newPlayer = new NetworkPlayerInfo(
        //                                vxUtil.ReadXML(plyr, "Name"),
        //                                Convert.ToInt32(vxUtil.ReadXML(plyr, "Level")),
        //                                vxUtil.ReadXML(plyr, "Token"),
        //                                bool.Parse(vxUtil.ReadXML(plyr, "Ready")));

        //                            //Now Search through the lobby list, 
        //                            foreach (vxServerLobbyPlayerItem it in List_Items)
        //                            {
        //                                if (it.Player.Token == newPlayer.Token)
        //                                {
        //                                    it.Player.Ready = newPlayer.Ready;
        //                                }                                        
        //                            }
        //                        }

        //                        break;

        //                    case SVRMSG_LAUNCH_START:

        //                        break;
        //                    case SVRMSG_LAUNCH_COUNTDOWN:
        //                        SessionStateForClient = SessionState.Countdown;
        //                        Console.WriteLine("Count Down Starting...");
        //                        break;
        //                    case SVRMSG_LAUNCH_ABORT:
        //                        SessionStateForClient = SessionState.Idle;
        //                        Console.WriteLine("Count Down ABORTED!!");
        //                        break;
        //                    default:
        //                        vxConsole.WriteNetworkLine("Unknown Data Package '" + chat + "'");                                
        //                        break;
        //                }
        //                break;
        //            default:
        //                vxConsole.WriteNetworkLine("Unhandled type: " + im.MessageType + " " + im.LengthBytes + " bytes");
        //                break;
        //        }
        //        vxEngine.GameClient.Recycle(im);
        //    }
        //}

        ///// <summary>
        ///// Method for Server Receiving Messages.
        ///// </summary>
        ///// <param name="peer"></param>
        //public virtual void ServerMsgCallback(object peer)
        //{
        //    NetIncomingMessage msg;
        //    if (vxEngine.GameSever != null)
        //    {
        //        while ((msg = vxEngine.GameSever.ReadMessage()) != null)
        //        {
        //            switch (msg.MessageType)
        //            {
        //                /**************************************************************/
        //                //Handle Discovery
        //                /**************************************************************/
        //                case NetIncomingMessageType.DiscoveryRequest:

        //                    // Create a response and write some example data to it
        //                    NetOutgoingMessage response = vxEngine.GameSever.CreateMessage();

        //                    //Send Back Connection Information, the client will need to Authenticate with a Secret though
        //                    string respString = vxUtil.WriteXML(serverName, "name");
        //                    respString += vxUtil.WriteXML(vxEngine.GameSever.Configuration.BroadcastAddress.ToString(), "ip");
        //                    respString += vxUtil.WriteXML(vxEngine.GameSever.Configuration.Port.ToString(), "port");
        //                    response.Write(respString);
                            
        //                    // Send the response to the sender of the request
        //                    vxEngine.GameSever.SendDiscoveryResponse(response, msg.SenderEndPoint);
        //                    vxConsole.WriteNetworkLine(string.Format("Discovery Request Recieved from: {0}", msg.SenderEndPoint));
        //                    break;


        //                /**************************************************************/
        //                //Handle Connection Approval
        //                /**************************************************************/
        //                case NetIncomingMessageType.ConnectionApproval:
        //                    string s = msg.ReadString();
        //                    if (s == "secret")
        //                    {
        //                        NetOutgoingMessage approve = vxEngine.GameSever.CreateMessage();

        //                        msg.SenderConnection.Approve(approve);
        //                    }
        //                    else
        //                        msg.SenderConnection.Deny();
        //                    break;

        //                case NetIncomingMessageType.ConnectionLatencyUpdated:

        //                    //Console.WriteLine("SERVER >>" + msg.ReadString());

        //                    break;

        //                /**************************************************************/
        //                //DEBUG
        //                /**************************************************************/
        //                case NetIncomingMessageType.VerboseDebugMessage:
        //                case NetIncomingMessageType.DebugMessage:
        //                case NetIncomingMessageType.WarningMessage:
        //                case NetIncomingMessageType.ErrorMessage:
        //                    vxConsole.WriteNetworkLine(msg.MessageType + " : " + msg.ReadString());
        //                    break;


        //                /**************************************************************/
        //                //StatusChanged
        //                /**************************************************************/
        //                case NetIncomingMessageType.StatusChanged:
        //                    NetConnectionStatus status = (NetConnectionStatus)msg.ReadByte();

        //                    vxConsole.WriteNetworkLine("Status changed too:     " + status);
        //                    string reason = msg.ReadString();
        //                    vxConsole.WriteNetworkLine(NetUtility.ToHexString(msg.SenderConnection.RemoteUniqueIdentifier) + " " + status + ": " + reason);


        //                    // New Connection
        //                    /**************************************************************/
        //                    if (status == NetConnectionStatus.Connected)
        //                    {
        //                        //Add the New Connection to the List
        //                        string respStringNew = vxUtil.WriteXML(msg.SenderEndPoint.ToString(), "ip");

        //                        playerCount++;

        //                        Random rand = new Random(playerCount * playerCount);

        //                        //Initialise Lobby Player Info
        //                        NetworkPlayerInfo newPlayer = new NetworkPlayerInfo("Player" + playerCount.ToString(),
        //                            rand.Next(0, 100),
        //                            msg.SenderConnection.RemoteUniqueIdentifier.ToString(),false);
                                
        //                        //Now Add a New Connection
        //                        SeverPlayerList.Add(newPlayer);

        //                        //Now Broadcast the New List
        //                        BroadcastUpdatedClientList(msg, SVRMSG_UPDATE_PLAYER_LIST);
        //                    }


        //                    // Remove/Lost Connection
        //                    /**************************************************************/
        //                    if (status == NetConnectionStatus.Disconnected)
        //                    {
        //                        //Find Player In Server List to Remove
        //                        string Token = msg.SenderConnection.RemoteUniqueIdentifier.ToString();

        //                        for(int i = 0; i < SeverPlayerList.Count; i++)
        //                        {
        //                            NetworkPlayerInfo player = SeverPlayerList[i];

        //                            //Check to see if the Tokens Are the same
        //                            if(Token == player.Token)
        //                            {
        //                                //Now Remove the Player
        //                                SeverPlayerList.Remove(player);

        //                                //Since one entry was removed, we need to decrement by one.
        //                                i--;
        //                            }
        //                        }
                                
        //                        //Now Broadcast the New List
        //                        BroadcastUpdatedClientList(msg, SVRMSG_UPDATE_PLAYER_LIST);
        //                    }
        //                    break;


        //                /**************************************************************/
        //                //Data
        //                /**************************************************************/
        //                case NetIncomingMessageType.Data:
        //                    // incoming chat message from a client
        //                    string chat = msg.ReadString();

        //                    //Split the Text By Carriage Return
        //                    string[] result = chat.Split(new string[] { "\n", "\r\n" }, StringSplitOptions.RemoveEmptyEntries);

        //                    switch (result[0])
        //                    {

        //                            //Respond to New Player Addition
        //                        case CLNTMSG_REQUEST_PLAYER_LIST:
        //                            NetOutgoingMessage om = vxEngine.GameSever.CreateMessage();
        //                            om.Write(GetPlayerList(SVRMSG_UPDATE_PLAYER_LIST));
        //                            vxEngine.GameSever.SendMessage(om, msg.SenderConnection, NetDeliveryMethod.ReliableOrdered);
        //                            break;

        //                        //A Player Has Updated their status
        //                        case CLNTMSG_UPDATE_PLAYER_STATUS:
                                    
        //                            for (int i = 1; i < result.Length; i++)
        //                            {
        //                                string plyr = result[i];

        //                                bool newReady = bool.Parse(vxUtil.ReadXML(plyr, "Ready"));
        //                                string token = vxUtil.ReadXML(plyr, "Token");

        //                                //Now Search through the lobby list,                                         
        //                                foreach (NetworkPlayerInfo it in SeverPlayerList)
        //                                {
        //                                    if (it.Token == token)                         
        //                                        it.Ready = newReady;
        //                                }
        //                            }

        //                            ReadyToAutoLaunch = false;

        //                            //Now Check If All Players are ready
        //                            if (SeverPlayerList.Count > 1)
        //                            {
        //                                //Now Search through the lobby list,                                         
        //                                foreach (NetworkPlayerInfo it in SeverPlayerList)
        //                                {
        //                                    //Set Ready To Launch too what the player's status is
        //                                    ReadyToAutoLaunch = it.Ready;

        //                                    //If any player is no, then abort launch
        //                                    if (it.Ready == false)
        //                                        break;
        //                                }
        //                            }

        //                            //Handle One off Events
        //                            if(ReadyToAutoLaunch && SessionStateForServer == SessionState.Idle)
        //                            {
        //                                SessionStateForServer = SessionState.Countdown;
        //                                Broadcast(msg, SVRMSG_LAUNCH_COUNTDOWN, false);
        //                            }
        //                            else
        //                            {
        //                                SessionStateForServer = SessionState.Idle;
        //                                Broadcast(msg, SVRMSG_LAUNCH_ABORT, false);
        //                            }

        //                            vxConsole.WriteNetworkLine(ReadyToAutoLaunch);

        //                            //Now Broadcast the Update
        //                            BroadcastUpdatedClientList(msg, SVRMSG_UPDATE_PLAYER_STATUS, false);
        //                            break;

        //                        default:
        //                            vxConsole.WriteNetworkLine("SERVER >> Unknown Data Package '" + chat + "'");
        //                            break;
        //                    }
        //                    break;
        //                default:
        //                    vxConsole.WriteNetworkLine("Unhandled type: " + msg.MessageType + " " + msg.LengthBytes + " bytes " + msg.DeliveryMethod + "|" + msg.SequenceChannel);
        //                    break;
        //            }
        //            vxEngine.GameSever.Recycle(msg);
        //        }
        //    }
        //}


        ///// <summary>
        ///// Broadcasts too All Connected Clients the Updated Client List. This version removes the original 
        ///// sender from the reciepents list.
        ///// </summary>
        ///// <param name="sender">The Original Message Sender</param>
        ///// <param name="header">The Header for the string to be sent.</param>
        //private void BroadcastUpdatedClientList(NetIncomingMessage sender, string header)
        //{
        //    BroadcastUpdatedClientList(sender, header, true);
        //}

        ///// <summary>
        ///// Broadcasts too All Connected Clients the Updated Client List.
        ///// </summary>
        ///// <param name="sender">The Original Message Sender</param>
        ///// <param name="header">The Header for the string to be sent.</param>
        ///// <param name="removeSender">Should the original Sender of this message be removed from the broadcast list.</param>
        //private void BroadcastUpdatedClientList(NetIncomingMessage sender, string header, bool removeSender)
        //{
        //    // broadcast this to all connections, except sender
        //    List<NetConnection> all = vxEngine.GameSever.Connections; // get copy

        //    if(removeSender)
        //        all.Remove(sender.SenderConnection);

        //    if (all.Count > 0)
        //    {
        //        NetOutgoingMessage om2 = vxEngine.GameSever.CreateMessage();
        //        om2.Write(GetPlayerList(header));
        //        vxEngine.GameSever.SendMessage(om2, all, NetDeliveryMethod.ReliableOrdered, 0);
        //    }
        //}


        ///// <summary>
        ///// Broadcasts a string of text to all clients
        ///// </summary>
        ///// <param name="sender">The Originator of the Broadcast. Usually the Server.</param>
        ///// <param name="textToBrodcast">The string of Text to broadcast too all clients.</param>
        ///// <param name="removeSender">Should the originator of the broadcast be removed from the broadcast.</param>
        //private void Broadcast(NetIncomingMessage sender, string textToBrodcast, bool removeSender)
        //{
        //    // broadcast this to all connections, except sender
        //    List<NetConnection> all = vxEngine.GameSever.Connections; // get copy

        //    if (removeSender)
        //        all.Remove(sender.SenderConnection);

        //    if (all.Count > 0)
        //    {
        //        NetOutgoingMessage om2 = vxEngine.GameSever.CreateMessage();
        //        om2.Write(textToBrodcast);
        //        vxEngine.GameSever.SendMessage(om2, all, NetDeliveryMethod.ReliableOrdered, 0);
        //    }
        //}
